#! /bin/bash
# Shell functions

# Display the weather. Optionally, provide a location argument.
weather() {
  curl "wttr.in/$1"
}

# Display more detailed wind and cloud weather for a location. 
meteogram() {
  finger "$1@graph.no"
}

colorscheme() {
    NUM=$1

    SCHEMES=($(ls -1 "$HOME/.config/kitty/themes/themes"))

    while true
    do
        SCHEME="${SCHEMES[$NUM % ${#SCHEMES[@]}]}"
        kitty @ set-colors --all --configured "$HOME/.config/kitty/themes/themes/$SCHEME"
        echo "Colorscheme set to $SCHEME. ($NUM)"
        NUM=$((NUM + 1))
        sleep 1
    done
}

spinfo() {
    ALBUM_ART=$(playerctl metadata mpris:artUrl | sed 's/open.spotify.com/i.scdn.co/')
    ARTIST=$(playerctl metadata xesam:artist)
    ALBUM=$(playerctl metadata xesam:album)
    TITLE=$(playerctl metadata xesam:title)
    icat "$ALBUM_ART"
    echo "$TITLE"
    echo "$ALBUM"
    echo "$ARTIST"
}

# Clear displayed images.
iclear() {
    SLEEP=${1:-0}
    sleep "$SLEEP"
    kitty +kitten icat --clear
}

# Display an image inline in the terminal.
icat() {
    kitty +kitten icat --align left "$1"
}

# Show git branch info with description.
branch-info() {
    active=" "

    for branch in $(git branch); do
        if [[ "$branch" == "*" ]]; then
            active="*"
            continue
        fi

        description=$(git config "branch.$branch.description")

        printf '%s \e[33m%s\e[0m\t%s\n' "$active" "$branch" "$description"

        if [[ "$active" == "*" ]]; then
            active=" "
        fi
    done
}

cleanup() {
    BASE=$1
    BRANCHES=$(git for-each-ref refs/heads --format="%(refname:short)" | grep -vE "(develop|master|rc-v\d+\.\d+\.\d+)")

    while IFS= read -r branch; do
        if ! git cherry "$BASE" "$branch" | grep -q "^+"; then
            git branch -D "$branch"
        fi
    done < <(echo "$BRANCHES")
}
